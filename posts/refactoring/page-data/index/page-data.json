{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","webpackCompilationHash":"3cbd9ccc532f8502bb54","result":{"data":{"deck":{"id":"56cdbb2e-2561-5cef-91a0-01b133c50e20","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Chapter 8\"), mdx(\"p\", null, \"Moving Fetarues\"), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Move Function\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Move Field\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Move Statements into Function\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Move Statements to Callers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Replace Inline Code with Function Call\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Slide Statements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Split Loop\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Replace Loop With Pipeline\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remove Dead Code\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Move Function\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When a function is referencing elements in other contexts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To improve encapsulation.\")), mdx(\"h3\", null, \"Mechanics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check all elements used by the chose function\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check if the chose function is a polymorphic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Copy the function to new context.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Figure out how to reference the new function from the source context.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Decide whether delete source function to reduce complexity\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Function Example\\\"\",\n    \"title\": \"\\\"Function\",\n    \"Example\\\"\": true\n  }), \"function trackSummary(points) {\\n  const calculateTime = () => 10;\\n  const totalTime = calculateTime();\\n  const totalDistance = calculateDistance();\\n  const pace = totalTime / 60 / totalDistance;\\n  return {\\n    time: totalTime,\\n    distance: totalDistance,\\n    pace: pace\\n  };\\n\\n  function calculateDistance() {\\n    let result = 0;\\n    for (let i = 1 i < points.length; i++) {\\n      result += distance(points[i-1], points[i]);\\n    }\\n    return result;\\n  }\\n\\n  function distance(p1, p2) {\\n    const EARTH_RADIUS = 3959;\\n    const dLat = radians(p2.lat) - radians(p1.lat);\\n    const dLon = radians(p2.lon) - radians(p1.lon);\\n    const a = Math.pow(Math.sin(dLat / 2), 2)\\n            + Math.cos(radians(p2.lat))\\n            * Math.cos(radians(p1.lat))\\n            * Math.pow(Math.sin(dLon / 2), 2);\\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\\n    return EARTH_RADIUS * c;\\n  }\\n\\n  function radians(degrees) {\\n    return degrees * Math.PI / 180;\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"12:18\",\n    \"12:18\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"14[24:29],15[17:48] subtitle=\\\"Exam all elements used by the function\\\"\",\n    \"14[24:29],15[17:48]\": true,\n    \"subtitle\": \"\\\"Exam\",\n    \"all\": true,\n    \"elements\": true,\n    \"used\": true,\n    \"by\": true,\n    \"the\": true,\n    \"function\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"12:30\",\n    \"12:30\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"22[18:51],23[18:51],25[24:38],26[24:38],31:33\",\n    \"22[18:51],23[18:51],25[24:38],26[24:38],31:33\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1,19,21:30  subtitle=\\\"Extract the function\\\"\",\n    \"1,19,21:30\": true,\n    \"\": true,\n    \"subtitle\": \"\\\"Extract\",\n    \"the\": true,\n    \"function\\\"\": true\n  }), \"function trackSummary(points) {\\n  const calculateTime = () => 10;\\n  const totalTime = calculateTime();\\n  const totalDistance = calculateDistance();\\n  const pace = totalTime / 60 / totalDistance;\\n  return {\\n    time: totalTime,\\n    distance: totalDistance,\\n    pace: pace\\n  };\\n\\n  function calculateDistance() {\\n    let result = 0;\\n    for (let i = 1; i < points.length; i++) {\\n      result += distance(points[i-1], points[i]);\\n    }\\n    return result;\\n  }\\n}\\n\\nfunction top_calculateDistance(points) {\\n  let result = 0;\\n  for (let i = 1; i < points.length; i++) {\\n    result += distance(points[i-1], points[i]);\\n  }\\n  return result;\\n\\n  function distance(p1, p2) {...}\\n  function radians(degrees) {...}\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1,13 subtitle=\\\"Call new function\\\"\",\n    \"1,13\": true,\n    \"subtitle\": \"\\\"Call\",\n    \"new\": true,\n    \"function\\\"\": true\n  }), \"function trackSummary(points) {\\n  const calculateTime = () => 10;\\n  const totalTime = calculateTime();\\n  const totalDistance = calculateDistance();\\n  const pace = totalTime / 60 / totalDistance;\\n  return {\\n    time: totalTime,\\n    distance: totalDistance,\\n    pace: pace\\n  };\\n\\n  function calculateDistance() {\\n    return top_calculateDistance(points);\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"4[25:53] subtitle=\\\"Remove and Replace the function call\\\"\",\n    \"4[25:53]\": true,\n    \"subtitle\": \"\\\"Remove\",\n    \"and\": true,\n    \"Replace\": true,\n    \"the\": true,\n    \"function\": true,\n    \"call\\\"\": true\n  }), \"function trackSummary(points) {\\n  const calculateTime = () => 10;\\n  const totalTime = calculateTime();\\n  const totalDistance = top_calculateDistance(points);\\n  const pace = totalTime / 60 / totalDistance;\\n  return {\\n    time: totalTime,\\n    distance: totalDistance,\\n    pace: pace\\n  };\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Rename the function\\\"\",\n    \"subtitle\": \"\\\"Rename\",\n    \"the\": true,\n    \"function\\\"\": true\n  }), \"function trackSummary(points) {\\n  const calculateTime = () => 10;\\n  const totalTime = calculateTime();\\n  const pace = totalTime / 60 / totalDistance(points);\\n  return {\\n    time: totalTime,\\n    distance: totalDistance(points),\\n    pace: pace\\n  };\\n}\\nfunction totalDistance(points) {\\n  let result = 0;\\n  for (let i = 1; i < points.length; i++) {\\n    result += distance(points[i-1], points[i]);\\n  }\\n  return result;\\n\\n  function distance(p1, p2) {...}\\n  function radians(degrees) {...}\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function trackSummary(points) {...}\\nfunction totalDistance(points) {...}\\nfunction distance(p1, p2) {...}\\nfunction radians(degrees) {...}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Move Field\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Good data structure leads simple and straightforward code.\")), mdx(\"h3\", null, \"Mechanics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensure the source field is encapsulated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a field in the target\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensure the reference from the source object to the target object\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Accessors to target field\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remove source field\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"class Customer {\\n  constructor(name, discountRate) {\\n    this._name = name;\\n    this._discountRate = discountRate;\\n    this._contract = new CustomerContract(dateToday());\\n  }\\n  get discountRate() {return this._discountRate;}\\n  becomePreferred() {\\n    this._discountRate += 0.03;\\n    // other nice things\\n  }\\n  applyDiscount(amount) {\\n    return amount.subtract(amount.multiply(this._discountRate));\\n  }\\n}\\n\\nclass CustomerContract {\\n  constructor(startDate) {\\n    this._startDate = startDate;\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Encapsulate Variable\\\"\",\n    \"subtitle\": \"\\\"Encapsulate\",\n    \"Variable\\\"\": true\n  }), \"class Customer {\\n  constructor(name, discountRate) {\\n    this._name = name;\\n    this._setDiscountRate(discountRate);\\n    this._contract = new CustomerContract(dateToday());\\n  }\\n  get discountRate() {return this._discountRate;}\\n  _setDisctountRate(aNumber) { this._discountRate = aNumber; }\\n  becomePreferred() {\\n    this._setDiscountRate(this.discountRate + 0.03)\\n  }\\n  applyDiscount(amount) {\\n    return amount.subtract(amount.multiply(this.discountRate));\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"2[26:37],4,7,8 subtitle=\\\"Add accessors to target object\\\"\",\n    \"2[26:37],4,7,8\": true,\n    \"subtitle\": \"\\\"Add\",\n    \"accessors\": true,\n    \"to\": true,\n    \"target\": true,\n    \"object\\\"\": true\n  }), \"class CustomerContract {\\n  constructor(startDate, discountRate) {\\n    this._startDate = startDate;\\n    this._discountRate = discountRate;\\n  }\\n\\n  get discountRate() { return this._discountRate; }\\n  set discountRate(arg) { this._discountRate = arg; }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Use new accessor from original object\\\"\",\n    \"subtitle\": \"\\\"Use\",\n    \"new\": true,\n    \"accessor\": true,\n    \"from\": true,\n    \"original\": true,\n    \"object\\\"\": true\n  }), \"class Customer {\\n  constructor(name, discountRate) {\\n    this._name = name;\\n    this._contract = new CustomerContract(dateToday());\\n    this._setDiscountRate(discountRate);\\n  }\\n  get discountRate() {return this._contract.discountRate;}\\n  _setDisctountRate(aNumber) { this._contract.discountRate = aNumber; }\\n...\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Move Statements into Function\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remove duplication\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Inverse of \\\"Move Statements to Callers\\\"\")), mdx(\"h3\", null, \"Mechanics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Group repetitive codes(Slide Statements)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If source is only caller of target function\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"Move the statements to target function\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If more than one caller exist, extract function\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"with the statements\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Replace function call to call the target function\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remove original function\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rename the function\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function renderPerson(outStream, person) {\\n  const result = [];\\n  result.push(`<p>${person.name}</p>`);\\n  result.push(renderPhoto(person.photo));\\n  result.push(`<p>title: ${person.photo.title}</p>`);\\n  result.push(emitPhotoData(person.photo));\\n  return result.join(\\\"\\\\n\\\");\\n}\\n  \\nfunction photoDiv(p) {\\n  return [\\n    \\\"<div>\\\",\\n    `<p>title: ${p.title}</p>`,\\n    emitPhotoData(p),\\n    \\\"</div>\\\",\\n  ].join(\\\"\\\\n\\\");\\n}\\n\\nfunction emitPhotoData(aPhoto) {\\n  const result = [];\\n  result.push(`<p>location: ${aPhoto.location}</p>`);\\n  result.push(`<p>date: ${aPhoto.date.toDateString()}</p>`);\\n  return result.join(\\\"\\\\n\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:6,13:14\",\n    \"5:6,13:14\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"4,9:14 subtitle=\\\"Extract function\\\"\",\n    \"4,9:14\": true,\n    \"subtitle\": \"\\\"Extract\",\n    \"function\\\"\": true\n  }), \"function photoDiv(p) {\\n  return [\\n    \\\"<div>\\\",\\n    zznew(p),\\n    \\\"</div>\\n  ].join(\\\"\\\\n\\\");\\n}\\n\\nfunction zznew(p) {\\n  return [\\n    `<p>title: ${p.title}</p>`,\\n    emitPhotoData(p),\\n  ].join(\\\"\\\\n\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"5,6 subtitle=\\\"Replace other function call\\\"\",\n    \"5,6\": true,\n    \"subtitle\": \"\\\"Replace\",\n    \"other\": true,\n    \"function\": true,\n    \"call\\\"\": true\n  }), \"function renderPerson(outStream, person) {\\n  const result = [];\\n  result.push(`<p>${person.name}</p>`);\\n  result.push(renderPhoto(person.photo));\\n  result.push(`<p>title: ${person.photo.title}</p>`);\\n  result.push(emitPhotoData(person.photo));\\n  return result.join(\\\"\\\\n\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"5 subtitle=\\\"Replace other function call\\\"\",\n    \"subtitle\": \"\\\"Replace\",\n    \"other\": true,\n    \"function\": true,\n    \"call\\\"\": true\n  }), \"function renderPerson(outStream, person) {\\n  const result = [];\\n  result.push(`<p>${person.name}</p>`);\\n  result.push(renderPhoto(person.photo));\\n  result.push(zznew(person.photo));\\n  return result.join(\\\"\\\\n\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"3:4,8[10:14],11 subtitle=\\\"Use Inline function and rename\\\"\",\n    \"3:4,8[10:14],11\": true,\n    \"subtitle\": \"\\\"Use\",\n    \"Inline\": true,\n    \"function\": true,\n    \"and\": true,\n    \"rename\\\"\": true\n  }), \"function emitPhotoData(aPhoto) {\\n  const result = [];\\n  result.push(`<p>location: ${aPhoto.location}</p>`);\\n  result.push(`<p>date: ${aPhoto.date.toDateString()}</p>`);\\n  return result.join(\\\"\\\\n\\\");\\n}\\n\\nfunction zznew(p) {\\n  return [\\n    `<p>title: ${p.title}</p>`,\\n    emitPhotoData(p),\\n  ].join(\\\"\\\\n\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"4,5 subtitle=\\\"Use Inline function and rename\\\"\",\n    \"4,5\": true,\n    \"subtitle\": \"\\\"Use\",\n    \"Inline\": true,\n    \"function\": true,\n    \"and\": true,\n    \"rename\\\"\": true\n  }), \"function emitPhotoData(p) {\\n  return [\\n    `<p>title: ${p.title}</p>`,\\n    `<p>location: ${p.location}</p>`,\\n    `<p>date: ${p.date.toDateString()}</p>',\\n  ].join(\\\"\\\\n\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"5[15:27],11,15 subtitle=\\\"Replace function call\\\"\",\n    \"5[15:27],11,15\": true,\n    \"subtitle\": \"\\\"Replace\",\n    \"function\": true,\n    \"call\\\"\": true\n  }), \"function renderPerson(outStream, person) {\\n  const result = [];\\n  result.push(`<p>${person.name}</p>`);\\n  result.push(renderPhoto(person.photo));\\n  result.push(emitPhotoData(person.photo));\\n  return result.join(\\\"\\\\n\\\");\\n}\\nfunction photoDiv(aPhoto) {\\n  return [\\n    \\\"<div>\\\",\\n    emitPhotoData(aPhoto),\\n    \\\"</div>\\\",\\n  ].join(\\\"\\\\n\\\");\\n}\\nfunction emitPhotoData(aPhoto) {\\n  return [\\n    `<p>title: ${aPhoto.title}</p>`,\\n    `<p>location: ${aPhoto.location}</p>`,\\n    `<p>date: ${aPhoto.date.toDateString()}</p>`,\\n  ].join(\\\"\\\\n\\\");\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Move Statements into Function\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"As a code base expands, Abstraction boundaries shift.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It could break a cohesiveness of a function\")), mdx(\"h3\", null, \"Mechanics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In simple circumstances, Move the function into the callers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Otherwise, Extract all the statements you don't want to move\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"to new function with temporary name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"une Inline Function on the original function.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rename extracted function to original name\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function renderPerson(outStream, person) {\\n  outStream.write(`<p>${person.name}</p>\\\\n`);\\n  renderPhoto(outStream, person.photo);\\n  emitPhotoData(outStream, person.photo);\\n}\\n\\nfunction listRecentPhotos(outStream, photos) {\\n  photos\\n    .filter(p => p.date > recentDateCutoff())\\n    .forEach(p => {\\n      outStream.write(\\\"<div>\\\\n\\\");\\n      emitPhotoData(outStream, p);\\n      outStream.write(\\\"</div>\\\\n\\\");\\n    });\\n}\\n\\nfunction emitPhotoData(outStream, photo) {\\n  outStream.write(`<p>title: ${photo.title}</p>\\\\n`);\\n  outStream.write(`<p>date: ${photo.date.toDateString()}</p>\\\\n`);\\n  outStream.write(`<p>location: ${photo.location}</p>\\\\n`);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"4[3:15],12[7:19],17[10:22]\",\n    \"4[3:15],12[7:19],17[10:22]\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Extract function that will remain\\\"\",\n    \"subtitle\": \"\\\"Extract\",\n    \"function\": true,\n    \"that\": true,\n    \"will\": true,\n    \"remain\\\"\": true\n  }), \"function emitPhotoData(outStream, photo) {\\n  zztmp(outStream, photo);\\n  outStream.write(`<p>location: ${photo.location}</p>\\\\n`);\\n}\\n\\nfunction zztmp(outStream, photo) {\\n  outStream.write(`<p>title: ${photo.title}</p>\\\\n`);\\n  outStream.write(`<p>date: ${photo.date.toDateString())}</p>\\\\n`);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"4,5 subtitle=\\\"Use Inline Function\\\"\",\n    \"4,5\": true,\n    \"subtitle\": \"\\\"Use\",\n    \"Inline\": true,\n    \"Function\\\"\": true\n  }), \"function renderPerson(outStream, person) {\\n  outStream.write(`<p>${person.name}</p>\\\\n`);\\n  renderPhoto(outStream, person.photo);\\n  zztmp(outStream, person.photo);\\n  outStream.write(`<p>location: ${person.photo.location}</p>\\\\n`);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Use Inline for the remain funtion\\\"\",\n    \"subtitle\": \"\\\"Use\",\n    \"Inline\": true,\n    \"for\": true,\n    \"the\": true,\n    \"remain\": true,\n    \"funtion\\\"\": true\n  }), \"function listRecentPhotos(outStream, photos) {\\n  photos\\n    .filter(p => p.date > recentDateCutoff())\\n    .forEach(p => {\\n      outStream.write(\\\"<div>\\\\n\\\");\\n      zztmp(outStream, p);\\n      outStream.write(`<p>location: ${p.location}</p>\\\\n`);\\n      outStream.write(\\\"</div>\\\\n\\\");\\n    });\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Remove the outer function\\\"\",\n    \"subtitle\": \"\\\"Remove\",\n    \"the\": true,\n    \"outer\": true,\n    \"function\\\"\": true\n  }), \"function listRecentPhotos(outStream, photos) {\\n  photos\\n    .filter(p => p.date > recentDateCutoff())\\n    .forEach(p => {\\n      outStream.write(\\\"<div>\\\\n\\\");\\n      zztmp(outStream, p);\\n      outStream.write(`<p>location: ${p.location}</p>\\\\n`);\\n      outStream.write(\\\"</div>\\\\n\\\");\\n    });\\n}\\n\\nfunction emitPhotoData(outStream, photo) {\\n  zztmp(outStream, photo);\\n  outStream.write(`<p>location: ${photo.location}</p>\\\\n`);\\n}\\n\\nfunction zztmp(outStream, photo) {\\n  outStream.write(`<p>title: ${photo.title}</p>\\\\n`);\\n  outStream.write(`<p>date: ${photo.date.toDateString()}</p>\\\\n`);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Remove the outer function\\\"\",\n    \"subtitle\": \"\\\"Remove\",\n    \"the\": true,\n    \"outer\": true,\n    \"function\\\"\": true\n  }), \"function listRecentPhotos(outStream, photos) {\\n  photos\\n    .filter(p => p.date > recentDateCutoff())\\n    .forEach(p => {\\n      outStream.write(\\\"<div>\\\\n\\\");\\n      zztmp(outStream, p);\\n      outStream.write(`<p>location: ${p.location}</p>\\\\n`);\\n      outStream.write(\\\"</div>\\\\n\\\");\\n    });\\n}\\n\\nfunction zztmp(outStream, photo) {\\n  outStream.write(`<p>title: ${photo.title}</p>\\\\n`);\\n  outStream.write(`<p>date: ${photo.date.toDateString()}</p>\\\\n`);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Rename the function\\\"\",\n    \"subtitle\": \"\\\"Rename\",\n    \"the\": true,\n    \"function\\\"\": true\n  }), \"function renderPerson(outStream, person) {\\n  outStream.write(`<p>${person.name}</p>\\\\n`);\\n  renderPhoto(outStream, person.photo);\\n  emitPhotoData(outStream, person.photo);\\n  outStream.write(`<p>location: ${person.photo.location}</p>\\\\n`);\\n}\\n\\nfunction listRecentPhotos(outStream, photos) {\\n  photos\\n    .filter(p => p.date > recentDateCutoff())\\n    .forEach(p => {\\n      outStream.write(\\\"<div>\\\\n\\\");\\n      emitPhotoData(outStream, p);\\n      outStream.write(`<p>location: ${p.location}</p>\\\\n`);\\n      outStream.write(\\\"</div>\\\\n\\\");\\n    });\\n}\\n\\nfunction emitPhotoData(outStream, photo) {\\n  outStream.write(`<p>title: ${photo.title}</p>\\\\n`);\\n  outStream.write(`<p>date: ${photo.date.toDateString()}</p>\\\\n`);\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Replace Inline Code with Function Call\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Replace inline code with function if possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check library functions for replacing\")), mdx(\"h3\", null, \"Mechanics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Replace the inline code with a call to the existing function\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let appliesToMass = false;\\nfor(const s of states) {\\n  if (s === \\\"MA\\\") appliesToMass = true;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"appliesToMass = states.includes(\\\"MA\\\");\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Slide Statements\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Code is easier to understand\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"when related code appears together\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A common case of this is declaring\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"and using variables\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It could help to use \\\"Extract Function\\\"\")), mdx(\"h3\", null, \"Mechanics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Identify the target position to move the fragment to.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Move the fragment\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Split Loop\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Loops that do many things\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"need to return structures\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Separate refactoring from optimization.\")), mdx(\"h3\", null, \"Mechanics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Copy the loop\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Identify and eliminate duplicate side effects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consider \\\"Extract Function\\\" on each loop.\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function report(people) {\\n  let youngest = people[0] ? people[0].age : Infinity;\\n  let totalSalary = 0;\\n  for (const p of people) {\\n    if (p.age < youngest) youngest = p.age;\\n    totalSalary += p.salary;\\n  }\\n  return `youngestAge: ${youngest}, totalSalary: ${totalSalary}`;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Split the loop\\\"\",\n    \"subtitle\": \"\\\"Split\",\n    \"the\": true,\n    \"loop\\\"\": true\n  }), \"function report(people) {\\n  let youngest = people[0] ? people[0].age : Infinity;\\n  let totalSalary = 0;\\n  for (const p of people) {\\n    totalSalary += p.salary;\\n  }\\n  \\n  for (const p of people) {\\n    if (p.age < youngest) youngest = p.age;\\n  }\\n  return `youngestAge: ${youngest}, totalSalary: ${totalSalary}`;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Apply 'Slide Statements'\\\"\",\n    \"subtitle\": \"\\\"Apply\",\n    \"'Slide\": true,\n    \"Statements'\\\"\": true\n  }), \"function report(people) {\\n  let totalSalary = 0;\\n  for (const p of people) {\\n    totalSalary += p.salary;\\n  }\\n  \\n  let youngest = people[0] ? people[0].age : Infinity;\\n  for (const p of people) {\\n    if (p.age < youngest) youngest = p.age;\\n  }\\n  return `youngestAge: ${youngest}, totalSalary: ${totalSalary}`;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Extract function\\\"\",\n    \"subtitle\": \"\\\"Extract\",\n    \"function\\\"\": true\n  }), \"function report(people) {\\n  \\n  return `youngestAge: ${youngest()}, totalSalary: ${totalSalary()}`;\\n  \\n  function totalSalary() {\\n    let totalSalary = 0;\\n    for (const p of people) {\\n      totalSalary += p.salary;\\n    }\\n    return totalSalary;\\n  }\\n\\n  function youngestAge() {\\n    let youngest = people[0] ? people[0].age : Infinity;\\n    for (const p of people) {\\n      if (p.age < youngest) youngest = p.age;\\n    }\\n    return youngest;\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Substitute algorithm\\\"\",\n    \"subtitle\": \"\\\"Substitute\",\n    \"algorithm\\\"\": true\n  }), \"function report(people) {\\n  \\n  return `youngestAge: ${youngest()}, totalSalary: ${totalSalary()}`;\\n  \\n  function totalSalary() {\\n    return people.reduce((total, p) => total + p.salary, 0);\\n  }\\n\\n  function youngestAge() {\\n    return Math.min(...people.map(p => p.age));\\n  }\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Pipeline\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Processes can be described as a series of\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"operations.\")), mdx(\"h3\", null, \"Mechanics\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create(Copy) a new variable for the loop's collection.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Replace the behaviours in the loop with a collection\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"pipeline operation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remove the loop\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"CSV data\\\"\",\n    \"subtitle\": \"\\\"CSV\",\n    \"data\\\"\": true\n  }), \"office, country, telephone\\nChicago, USA, +1 312 373 1000\\nBeijing, China, +86 4008 900 505\\nBangalore, India, +91 80 4064 9570\\nPorto Alegre, Brazil, +55 51 3079 3550\\nChennai, India, +91 44 660 44766\\n\\n... (more data follows)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function acquireData(input) {\\n  const lines = input.split(\\\"\\\\n\\\");\\n  let firstLine = true;\\n  const result = [];\\n  for (const line of lines) {\\n    if (firstLine) {\\n      firstLine = false;\\n      continue;\\n    }\\n    if (line.trim() === \\\"\\\") continue;\\n    const record = line.split(\\\",\\\");\\n    if (record[1].trim() === \\\"India\\\") {\\n      result.push({city: record[0].trim(), phone: record[2].trim()});\\n    }\\n  }\\n  return result;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Create loop variable\\\"\",\n    \"subtitle\": \"\\\"Create\",\n    \"loop\": true,\n    \"variable\\\"\": true\n  }), \"function acquireData(input) {\\n  const lines = input.split(\\\"\\\\n\\\");\\n  let firstLine = true;\\n  const result = [];\\n  const loopItems = lines;\\n  for (const line of loopItems) {\\n    if (firstLine) {\\n      firstLine = false;\\n      continue;\\n    }\\n    if (line.trim() === \\\"\\\") continue;\\n    const record = line.split(\\\",\\\");\\n    if (record[1].trim() === \\\"India\\\") {\\n      result.push({city: record[0].trim(), phone: record[2].trim()});\\n    }\\n  }\\n  return result;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function acquireData(input) {\\n  const lines = input.split(\\\"\\\\n\\\");\\n  const result = [];\\n  const loopItems = lines.slice(1);\\n  for (const line of loopItems) {\\n    if (line.trim() === \\\"\\\") continue;\\n    const record = line.split(\\\",\\\");\\n    if (record[1].trim() === \\\"India\\\") {\\n      result.push({city: record[0].trim(), phone: record[2].trim()});\\n    }\\n  }\\n  return result;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"filter empty line\\\"\",\n    \"subtitle\": \"\\\"filter\",\n    \"empty\": true,\n    \"line\\\"\": true\n  }), \"function acquireData(input) {\\n  const lines = input.split(\\\"\\\\n\\\");\\n  const result = [];\\n  const loopItems = lines\\n                    .slice(1);\\n                    .filter(line => line.trim() !== \\\"\\\")\\n  for (const line of loopItems) {\\n    const record = line.split(\\\",\\\");\\n    if (record[1].trim() === \\\"India\\\") {\\n      result.push({city: record[0].trim(), phone: record[2].trim()});\\n    }\\n  }\\n  return result;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function acquireData(input) {\\n  const lines = input.split(\\\"\\\\n\\\");\\n  const result = [];\\n  const loopItems = lines\\n                    .slice(1);\\n                    .filter(line => line.trim() !== \\\"\\\")\\n                    .map(line => line.split(\\\",\\\"));\\n  for (const line of loopItems) {\\n    const record = line;\\n    if (record[1].trim() === \\\"India\\\") {\\n      result.push({city: record[0].trim(), phone: record[2].trim()});\\n    }\\n  }\\n  return result;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function acquireData(input) {\\n  const lines = input.split(\\\"\\\\n\\\");\\n  const result = [];\\n  const loopItems = lines\\n                    .slice(1);\\n                    .filter(line => line.trim() !== \\\"\\\")\\n                    .map(line => line.split(\\\",\\\"))\\n                    .filter(record => record[1].trim() === \\\"India\\\");\\n  for (const line of loopItems) {\\n    const record = line;\\n    result.push({city: record[0].trim(), phone: record[2].trim()});\\n  }\\n  return result;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function acquireData(input) {\\n  const lines = input.split(\\\"\\\\n\\\");\\n  const result = [];\\n  const result = lines\\n        .slice(1);\\n        .filter(line => line.trim() !== \\\"\\\")\\n        .map(line => line.split(\\\",\\\"))\\n        .filter(record => record[1].trim() === \\\"India\\\");\\n        .map(record => ({city: record[0].trim(), phone: record[2].trim()}));\\n\\n  return result;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function acquireData(input) {\\n  const lines = input.split(\\\"\\\\n\\\");\\n  return lines\\n        .slice(1);\\n        .filter(line => line.trim() !== \\\"\\\")\\n        .map(line => line.split(\\\",\\\"))\\n        .filter(record => record[1].trim() === \\\"India\\\");\\n        .map(record => ({city: record[0].trim(), phone: record[2].trim()}));\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Remove Dead Code\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It could make hard to understand the software.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","isCreatedByStatefulCreatePages":false,"id":"56cdbb2e-2561-5cef-91a0-01b133c50e20","slug":"","title":"Chapter 8"}}}